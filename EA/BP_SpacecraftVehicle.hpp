#ifndef UE4SS_SDK_BP_SpacecraftVehicle_HPP
#define UE4SS_SDK_BP_SpacecraftVehicle_HPP

class ABP_SpacecraftVehicle_C : public ABP_WorldInteractiveVehicle_C
{
    FPointerToUberGraphFrame UberGraphFrame;
    class UAudioComponent* SC_CockpitGlass_A;
    class UAudioComponent* SC_CockpitGlass_B;
    class UBP_ModularStaticMeshComponent_C* Shuttle;
    class UVoxelSimpleInvokerComponent* VoxelInvoker;
    class USceneComponent* PlayerLeavePoint;
    class USceneComponent* UniversalComponents;
    class UChildActorComponent* BP_RocketFlareL1;
    class UChildActorComponent* BP_RocketFlareR1;
    class USpringArmComponent* SpringArm;
    class UAudioComponent* S_Rocket_Cue;
    class UAudioComponent* S_RocketLight_Cue;
    class UAudioComponent* S_RocketHeavy_Cue;
    class UCameraComponent* Camera;
    float WindshieldTimeline_Lerp_EA4F8FC54C5E071EE919D4A910009F1F;
    TEnumAsByte<ETimelineDirection::Type> WindshieldTimeline__Direction_EA4F8FC54C5E071EE919D4A910009F1F;
    class UTimelineComponent* WindshieldTimeline;
    float LandingTimeline_Lerp_80693A9C4AD3F2E96D20F8BE15D7AAE1;
    TEnumAsByte<ETimelineDirection::Type> LandingTimeline__Direction_80693A9C4AD3F2E96D20F8BE15D7AAE1;
    class UTimelineComponent* LandingTimeline;
    float DesignerPreviewAnim_State_A49B31BC4DEBDD0D4BEF2893F412D591;
    TEnumAsByte<ETimelineDirection::Type> DesignerPreviewAnim__Direction_A49B31BC4DEBDD0D4BEF2893F412D591;
    class UTimelineComponent* DesignerPreviewAnim;
    float Delta seconds;
    bool Booster;
    float Movement speed;
    float Camera speed;
    bool Possessed;
    bool EnterEnable;
    bool CanMove;
    float MoveForward;
    float MoveRight;
    float Turn;
    float MoveUp;
    float LookUp;
    TArray<class ABP_SquareFlare_C*> BP_RocketFlares;
    class UMaterialInstanceDynamic* DynamicMaterial;
    FLinearColor RocketFlareColor;
    float BoostMultiplier;
    float Thruster_MaterialGlow_Min;
    float Thruster_MaterialGlow_Max;
    float Thruster X Axis Turning - Interpolation amount;
    float RocketFlare_Turning_Intensity;
    float RocketFlare_LightIntensity_Max;
    float RocketFlare_PointLight_Radius;
    float MostDistant_RocketFlare_Y_Location;
    float RocketFlare_Interpolated;
    float Thruster X Axis Turning;
    bool IsMovingToDestination;
    FVector Destination;
    FVector DestinationDirection;
    FRotator SpringArmRotation;
    class ABP_LandingLegs_C* LandingLegs;
    int32 LandingFlag;
    bool IsLanding;
    class UBP_ModularStaticMeshComponent_C* Windshield;
    bool CanStrafeLeft;
    bool CanStrafeRight;
    float RotationInterpolationSpeed;
    TArray<class ABP_Thruster_C*> Thrusters;
    bool HasLegsOpened;

    float GetBoosterValue();
    void ControlLegs(bool Open);
    void UpdateThrusterFlares(FVector Direction);
    void UpdateAction(bool Value, EEHVehicleAction Enum);
    void Land();
    TMap<class EPlayerActionType, class FText> GetActionNames();
    void InitDynamicComponents();
    void InitFlares();
    void StopMovement();
    void UpdateBooster(bool IsOn);
    void UpdateInputs();
    void UserConstructionScript();
    void DesignerPreviewAnim__FinishedFunc();
    void DesignerPreviewAnim__UpdateFunc();
    void LandingTimeline__FinishedFunc();
    void LandingTimeline__UpdateFunc();
    void WindshieldTimeline__FinishedFunc();
    void WindshieldTimeline__UpdateFunc();
    void InpActEvt_ActionLeave_K2Node_InputActionEvent_3(FKey Key);
    void InpActEvt_ActionOpen_K2Node_InputActionEvent_2(FKey Key);
    void InpActEvt_Turbo_K2Node_InputActionEvent_1(FKey Key);
    void InpActEvt_Turbo_K2Node_InputActionEvent_0(FKey Key);
    void ReceivePossessed(class AController* NewController);
    void ReceiveUnpossessed(class AController* OldController);
    void ReceiveHit(class UPrimitiveComponent* MyComp, class AActor* Other, class UPrimitiveComponent* OtherComp, bool bSelfMoved, FVector HitLocation, FVector HitNormal, FVector NormalImpulse, const FHitResult& Hit);
    void ReceiveBeginPlay();
    void ReceiveTick(float DeltaSeconds);
    void OnWorldActorInteract();
    void OnWorldActorSpawned(bool ShouldMoveToDestination, FVector DestinationOffset);
    void DisableMovement();
    void SavegameObjectSerializeDataLoaded();
    void SavingGameData(class UEHSaveGame* SaveGame);
    void OnDesignerVehiclePreviewSpawn();
    void InitVehicle(const FEHVehicleDefinition& VehicleDefinition);
    void Landing(const FTransform& StartTransform, const FTransform EndTransform);
    void ControlWindshield(bool Open);
    void Server_MoveForward(float Value);
    void Server_MoveUp(float Value);
    void Server_LookUp(float Value);
    void Server_MoveRight(float Value);
    void Server_Turn(float Value);
    void Server_Booster(bool IsBoosterOn);
    void ExecuteUbergraph_BP_SpacecraftVehicle(int32 EntryPoint);
};

#endif
