#ifndef UE4SS_SDK_BP_ManipulatorRobot_HPP
#define UE4SS_SDK_BP_ManipulatorRobot_HPP

class ABP_ManipulatorRobot_C : public AActor
{
    FPointerToUberGraphFrame UberGraphFrame;
    class UAudioComponent* MoveSound;
    class UBP_SceneInteractionChildMesh_C* SM_ManipulatorRobot_BaseMain;
    class UAudioComponent* WorkEndSound;
    class UAudioComponent* WorkStartSound;
    class UAudioComponent* DrillSound;
    class UBP_SceneInteractionChildMesh_C* RightArm1;
    class UBP_SceneInteractionChildMesh_C* LeftFinger1;
    class UBP_SceneInteractionChildMesh_C* RightFinger1;
    class UBP_SceneInteractionChildMesh_C* LeftArm1;
    class UBP_SceneInteractionChildMesh_C* Segment5;
    class UBP_SceneInteractionChildMesh_C* Segment4;
    class UBP_SceneInteractionChildMesh_C* Segment3;
    class UBP_SceneInteractionChildMesh_C* Segment2;
    class UBP_SceneInteractionChildMesh_C* Segment1;
    class UBP_SceneInteractionChildMesh_C* Base1;
    class USceneComponent* DefaultSceneRoot;
    float DrillEffect_DrillSpin_7731AD5A4E8BDD66E9B203BBA8F66010;
    TEnumAsByte<ETimelineDirection::Type> DrillEffect__Direction_7731AD5A4E8BDD66E9B203BBA8F66010;
    class UTimelineComponent* DrillEffect;
    float AnimToDrillPos_Value_584B07564DDF6A374DEB98927B18A852;
    TEnumAsByte<ETimelineDirection::Type> AnimToDrillPos__Direction_584B07564DDF6A374DEB98927B18A852;
    class UTimelineComponent* AnimToDrillPos;
    FVector Point0_loc;
    FVector Point1_loc;
    FVector Point2_loc;
    FVector Point3_loc;
    FVector Point4_loc;
    float Seg1_len;
    float Seg2_len;
    float Seg3_len;
    float Seg4_len;
    FVector Q3_Point_loc;
    float SideA_len;
    float SideB_len;
    float SideC_len;
    float Alpha_angle;
    float RotZAdd;
    FRotator Seg1_InitRotation;
    FRotator Seg2_InitRotation;
    FRotator Seg3_InitRotation;
    FRotator Seg0_InitRotation;
    FRotator Seg4_InitRotation;
    FRotator Seg5_InitRotation;
    float Seg1_PitchFinal;
    float Seg2_PitchFinal;
    float Seg3_PitchFinal;
    float Seg0_YawFinal;
    FRotator RightArm_InitRotation;
    FRotator RightFinger_InitRotation;
    FRotator LeftArm_InitRotation;
    FRotator LeftFinger_InitRotation;
    FVector Point5_loc;
    float outcargo_Seg4_Yaw;
    FVector leftarm_location;
    FVector rightarm_location;
    float RightArm_Len;
    float LeftArm_Len;
    float RightFinger_Len;
    float LeftFinger_Len;
    FRotator Seg4_RotatorFinal;
    float outcargo_Seg4_Rot;
    float WP_Seg1_Pitch;
    float WP_Seg2_Pitch;
    float WP_Seg3_Pitch;
    float WP_Seg4_Pitch;
    float SP_Seg1_Pitch;
    float SP_Seg2_Pitch;
    float SP_Seg3_Pitch;
    float SP_Seg4_Pitch;
    float SP_LeftArm_Yaw;
    float SP_LeftFinger_Yaw;
    float SP_RightArm_Yaw;
    float SP_RightFinger_Yaw;
    class ABP_RoverPawn_C* Rover;
    FVector Target;
    float Angle;
    float AnimValue;
    bool ShouldUpdateMinipulatorPoint;
    bool DrillActive;
    FIntVector LastVoxelDrillPosition;
    FLinearColor StartColor;

    void calcPointFromCargo(FVector BoundBox, float Rot_Yaw, FVector Location, float SegmentLen, float CargoOffsetX, float CargoOffsetZ, FVector& Point1_loc, FVector& Point2_loc, float& CargoAngle1, float& CargoAngle2, float& CargoSize1, float& CargoSize2, float& OutYaw1, float& OutYaw2, float& OutLen1, float& OutLen2);
    void calcGetAngle(FVector Location, float& GetAngle);
    void checkTriangle(bool& Test);
    void GetCrossAngle(FVector Location, FVector PointLoc, float CargoYaw, float& Angle, float& Yaw);
    void GetRotationAngles(FVector Vec1, FVector Vec2, FRotator& Rotation);
    void CalculatePose(FVector Location, float Angle);
    void CalculatePhases(FVector Pos, float Angle);
    void ActivateDrill(bool Active);
    void RotateMeshPitch(float Value, float From, float To, class USceneComponent* Component);
    void UpdateManipulatorPoint();
    void UserConstructionScript();
    void AnimToDrillPos__FinishedFunc();
    void AnimToDrillPos__UpdateFunc();
    void AnimToDrillPos__Work-Drill__EventFunc();
    void DrillEffect__FinishedFunc();
    void DrillEffect__UpdateFunc();
    void Test(FVector Pos, float Angle);
    void Stop();
    void ReceiveTick(float DeltaSeconds);
    void Start();
    void DrillStartEfffect();
    void Drilling();
    void ExecuteUbergraph_BP_ManipulatorRobot(int32 EntryPoint);
};

#endif
