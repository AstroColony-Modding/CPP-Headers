#ifndef UE4SS_SDK_BP_BotBox_HPP
#define UE4SS_SDK_BP_BotBox_HPP

class ABP_BotBox_C : public AActor
{
    FPointerToUberGraphFrame UberGraphFrame;
    class USkeletalMeshComponent* MeshNew;
    class UCapsuleComponent* CollisionCylinder1;
    class UParticleSystemComponent* PS_ShotFire;
    class UWidgetComponent* Marker;
    class UParticleSystemComponent* P_BotEngine;
    class UAudioComponent* S_Speach;
    class UWidgetComponent* 3dWidget;
    class UStaticMeshComponent* Projector;
    class UProjectileMovementComponent* ProjectileMovement;
    class UStaticMeshComponent* ProjectorPlane;
    class UStaticMeshComponent* ProjectionCone;
    float SleepTimeline_SleepHeight_0125B36341281069C2DFFF80BFEE7B33;
    TEnumAsByte<ETimelineDirection::Type> SleepTimeline__Direction_0125B36341281069C2DFFF80BFEE7B33;
    class UTimelineComponent* SleepTimeline;
    float ScreenTimeline_Scale_687E88EF42A093F8114465819BEC471E;
    TEnumAsByte<ETimelineDirection::Type> ScreenTimeline__Direction_687E88EF42A093F8114465819BEC471E;
    class UTimelineComponent* ScreenTimeline;
    class UW3D_BotTutorial_C* W3D_BotTutorial;
    class UMaterialInstanceDynamic* MonitorMaterial;
    bool Activate;
    bool ShowGuns;
    bool ShouldMove;
    bool IsChasing;
    bool IsSleeping;
    class ACharacter* PlayerCharacter;
    FVector PlayerLocation;
    float Speed;
    float DistanceStartChase;
    float DistanceStopChase;
    FText FinalText;
    float RotateInterpolateSpeed;
    float StartLocationDistance;
    uint8 LastSpeachPose;
    FTimerHandle SpeachFaceExpressionHandle;
    int32 SwapMissionID;
    int32 NodeDebugID;
    class ABP_BotBoundaries_C* BotBoundaries;

    uint8 GetInteractionCircleStep();
    uint8 GetInteractionCircleStepsNumber();
    class UTexture2D* GetActionIcon();
    TMap<class EPlayerActionType, class FText> GetActionNames();
    TMap<class EPlayerActionType, class EHJobModeType> GetActionTypeJobModes();
    int32 GetAvailableActionsBits();
    FText GetInteractionDisplayName();
    TSubclassOf<class UWorldInteractiveInfoWidget> GetWorldInteractiveInfoWidgetClass();
    bool HasExplicitInteractions();
    bool IsRegisteringForbidden();
    FEHIndicationConfigData GetIndicationConfigData();
    FText GetIndicationText();
    FVector GetIndicationPosition();
    bool ShouldSerializeNamedActorSavegameSpawn();
    FName GetSerializedActorUniqueName();
    bool ShouldSerializeNamedActorSavegameData();
    bool ShouldSerializeUniqueClassSavegameData();
    FVector GetStartLocation();
    void FinalizeMission();
    void ShowFinalDebugText();
    void ShowNextDebugText();
    void DeactivateBot();
    void ActivateBot();
    void UpdateDynamicSize(FVector2D DesiredSize);
    void ResolveOverlappingStructure();
    void WakeUp();
    void Update Sleeping State(bool IsSleeping);
    void UpdateChasingState(bool IsChasing);
    void Update Face Expression(TEnumAsByte<BotFaceExpression::Type> FaceExpression);
    void ShowProjection(bool Visibility);
    void SetupBotBoundaries();
    void Init();
    void UserConstructionScript();
    void ScreenTimeline__FinishedFunc();
    void ScreenTimeline__UpdateFunc();
    void SleepTimeline__FinishedFunc();
    void SleepTimeline__UpdateFunc();
    void OnNotifyEnd_618E34364EF2F511F260888657539D8C(FName NotifyName);
    void OnNotifyBegin_618E34364EF2F511F260888657539D8C(FName NotifyName);
    void OnInterrupted_618E34364EF2F511F260888657539D8C(FName NotifyName);
    void OnBlendOut_618E34364EF2F511F260888657539D8C(FName NotifyName);
    void OnCompleted_618E34364EF2F511F260888657539D8C(FName NotifyName);
    void SetSerializedActorUniqueName(const FName UniqueName);
    void ReceiveBeginPlay();
    void GunsParticle();
    void SavingGameData(class UEHSaveGame* SaveGame);
    void LoadingGameData(class UEHSaveGame* SaveGame);
    void OnWorldActorSpawned(bool ShouldMoveToDestination, FVector DestinationOffset);
    void OnWorldActorRemove();
    void OnWorldActorHit();
    void ChasingStateChanged();
    void OnMissionEnded(class UMission* Mission, bool IsSuccesfull);
    void OnMissionObjectiveCompleted(const class UMission* Mission, const class UMOObjectiveNode* Node);
    void OnMissionNodeActivated(const class UMission* Mission, const class UMOTextNode* Node);
    void OnMissionRecovered(const class UMission* Mission);
    void UpdateSpeachFaceExpression();
    void EndTypewriterText();
    void StartTypewriterText(const FText& Text, const bool& ShowNext);
    void OnWorldActorInteract();
    void OnWorldActorClick();
    void OnWorldActorOpen();
    void UpdateSleepAnim();
    void SavegameObjectSerializeDataLoaded();
    void OnWorldActorRotate();
    void OnGameStarted();
    void ReceiveTick(float DeltaSeconds);
    void ExecuteUbergraph_BP_BotBox(int32 EntryPoint);
};

#endif
